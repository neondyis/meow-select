'use client';
import {
    Box,
    Button,
    Flex,
    FormControl,
    FormLabel,
    Input, NumberDecrementStepper, NumberIncrementStepper, NumberInput, NumberInputField, NumberInputStepper,
    Tag, useToast
} from '@chakra-ui/react';
import {useState} from 'react';
import axios from 'axios';
import AdminBody from '@/shared/components/AdminBody';

export default function AdminCreate(){
    const [topicList, setTopicList] = useState<Array<string>>([]);
    const [topicInput, setTopicInput] = useState<string>('');
    const [sizeInput,setSizeInput] = useState<number>(1);
    const [roomCode,setRoomCode] = useState<string>('');
    const toast = useToast()

    const addToTopicList = () => {
        if (topicInput !== '') {
            if(!topicList.some(e => e === topicInput)){
                setTopicList([...topicList, topicInput]);
                setTopicInput('');
            }else{
                toast({
                    title: 'Failed to add to List.',
                    description: "Value already exist.",
                    position: "bottom",
                    status: 'error',
                    duration: 2000,
                    isClosable: true,
                })
            }
        }
    }

    const createRoom = async() => {
        try{
            const res = await axios.post('/api/admin/rooms', {size: sizeInput});
            setRoomCode(res.data.code);
        }catch (e) {
            toast({
                title: 'Error',
                description: "Failed to create room.",
                position: "bottom",
                status: 'error',
                duration: 2000,
                isClosable: true,
            })
        }
    }

    const addTopics = async() => {
        try{
            const res = await axios.post('/api/admin/topics/bulk', {roomId: roomCode, topics: topicList})
            if(res){
                toast({
                    title: 'Success',
                    description: 'Topics added to room successfully.',
                    position: 'bottom',
                    status: 'success',
                    duration: 2000,
                    isClosable: true,
                })
            }
            setTopicList([]);
        }catch{
            toast({
                title: 'Error',
                description: "Failed to add topics to the room.",
                position: "bottom",
                status: 'error',
                duration: 2000,
                isClosable: true,
            })
        }
    }

    return (
        <Box>
            <AdminBody header={'Creating a room'}>
                <Flex flexDirection={'column'} justify={'space-evenly'} gap={5}>
                    <FormControl>
                        <FormLabel>Max number of participants</FormLabel>
                        <NumberInput defaultValue={1} min={1} max={30}
                                     value={sizeInput}
                                     onChange={(value) => setSizeInput(+value)} isDisabled={roomCode !== ''}>
                            <NumberInputField />
                            <NumberInputStepper>
                                <NumberIncrementStepper />
                                <NumberDecrementStepper />
                            </NumberInputStepper>
                        </NumberInput>
                    </FormControl>
                    <Button variant='outline' onClick={createRoom}>Generate Room</Button>
                </Flex>
                <Flex flexDirection={'column'} justify={'space-between'} h={'auto'} gap={5}>
                    <FormControl>
                        <FormLabel>Room Code</FormLabel>
                        <Input placeholder={'Room code is autogenerated'} disabled value={roomCode}/>
                    </FormControl>
                    <FormControl>
                        <FormLabel>Topic</FormLabel>
                        <Input value={topicInput} onChange={e => setTopicInput(e.target.value)}/>
                    </FormControl>
                    <Flex flexDirection={'row'} gap={2} flexWrap={'wrap'} maxH={'125px'}
                          overflow={'auto'}>
                        {topicList.map((topic, index) => {
                            return (
                                <Tag key={index} size={'sm'} colorScheme='cyan'>{topic}</Tag>)
                        })}
                    </Flex>
                    <Button onClick={addToTopicList} variant='outline'>Add to List</Button>
                    <Button variant='outline' onClick={addTopics}>
                        Confirm Topics
                    </Button>
                    <Button variant='outline' onClick={addTopics}>
                        Confirm Room Creation
                    </Button>
                </Flex>
            </AdminBody>
        </Box>
    )
}